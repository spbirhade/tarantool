
# username to switch to
username = NULL

# save core on abort/assert
# deprecated; use ulimit instead
coredump = 0

# admin port
# used for admin's connections
admin_port = 0

# Log verbosity, possible values: ERROR=1, CRIT=2, WARN=3, INFO=4(default), DEBUG=5
log_level = 4

# Size of slab arena in GB
slab_alloc_arena = 1

# Size of minimal allocation unit
slab_alloc_minimal = 64

# Growth factor, each subsequent unit size is factor * prev unit size
slab_alloc_factor = 2

# working directory (daemon will chdir(2) to it)
work_dir = NULL

# name of pid file
pid_file = "tarantool.pid"

# logger command will be executed via /bin/sh -c {}
# example: 'exec cronolog /var/log/tarantool/%Y-%m/%Y-%m-%d/tarantool.log'
# example: 'exec extra/logger.pl /var/log/tarantool/tarantool.log'
# when logger is not configured all logging going to STDERR
logger = NULL

# make logging nonblocking, this potentially can lose some logging data
logger_nonblock = 1

# delay between loop iterations
io_collect_interval = 0

# size of listen backlog
backlog = 1024

# network io readahead
readahead = 16320

# path for search scripts
lua_path = "lua/?.lua;scripts/lua/?.lua"

# # BOX
# Snapshot directory (where snapshots get saved/read)
snap_dir = "."

# WAL directory (where WALs get saved/read)
wal_dir = "."

# Primary port (where updates are accepted)
primary_port = 0

# Secondary port (where only selects are accepted)
secondary_port = 0

# Warn about requests which take longer to process, in seconds.
too_long_threshold = 0.5

# A custom process list (ps) title string, appended after the standard
# program title.
custom_proc_title = NULL

# Memcached protocol support is enabled if memcached_port is set
memcached_port = 0

# namespace used for memcached emulation
memcached_namespace = 23

# Memcached expiration is on if memcached_expire is set.
memcached_expire = 0

# maximum rows to consider per expire loop iteration
memcached_expire_per_loop = 1024

# tarantool will try to iterate over all rows within this time
memcached_expire_full_sweep = 3600

# Do not write into snapshot faster than snap_io_rate_limit MB/sec
snap_io_rate_limit = 0

# Write no more rows in WAL
rows_per_wal = 500000

# fsync WAL delay, only issue fsync if last fsync was wal_fsync_delay
# seconds ago.
# WARNING: actually, several last requests may stall fsync for much longer
wal_fsync_delay = 0

# size of WAL writer request buffer
wal_writer_inbox_size = 128

# Local hot standby (if enabled, the server will run in local hot standby
# mode, continuously fetching WAL records from shared local directory).
local_hot_standby = 0

# Delay, in seconds, between successive re-readings of wal_dir.
# The re-scan is necessary to discover new WAL files or snapshots.
wal_dir_rescan_delay = 0.1

# Panic if there is an error reading a snapshot or WAL.
# By default, panic on any snapshot reading error and ignore errors
# when reading WALs.
panic_on_snap_error = 1
panic_on_wal_error = 0

# Remote hot standby (if enabled, the server will run in hot standby mode
# continuously fetching WAL records from wal_feeder_ipaddr:wal_feeder_port
remote_hot_standby = 0
wal_feeder_ipaddr = NULL
wal_feeder_port = 0
namespace = [    {
        enabled = -1
        cardinality = -1
        estimated_rows = 0
        index = [            {
                type = ""
                unique = -1
                key_field = [                    {
                        fieldno = -1
                        type = ""
                    }
                ]
            }
        ]
    }
]
